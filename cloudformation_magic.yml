---
AWSTemplateFormatVersion: "2010-09-09"

Description: Evolutionary cloudformation template for DevOps study

Parameters:
  EC2Keypair:
    Type: String
    Default: stephen-trinimbus

Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.1.0.0/16'
      EnableDnsSupport: false
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        -
          Key: "Name"
          Value: "stephen-test"
        -
          Key: "Owner"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        -
          Key: "Name"
          Value: "stephen-test"
        -
          Key: "Ownwer"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"

  IGAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteTablePub:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        -
          Key: "Name"
          Value: "stephen-test"
        -
          Key: "Ownwer"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"

  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: IGAttachment
    Properties:
      RouteTableId: !Ref RouteTablePub
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetPub1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.1.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
        -
          Key: "Name"
          Value: !Join [_, [!Ref 'AWS::StackName', "subpub1"]]
        -
          Key: "Ownwer"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"

  SubnetPub1RouteAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub1

  SubnetPub2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
        -
          Key: "Name"
          Value: !Join [_, [!Ref 'AWS::StackName', "subpub2"]]
        -
          Key: "Ownwer"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"

  SubnetPub2RouteAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub2

  SubnetPub3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
        -
          Key: "Name"
          Value: !Join [_, [!Ref 'AWS::StackName', "subpub3"]]
        -
          Key: "Ownwer"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"

  SubnetPub3RouteAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub3

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Join [_, [!Ref 'AWS::StackName', "bucket1"]]
        -
          Key: "Ownwer"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"

  SecurityGroupPub:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join [_, [!Ref 'AWS::StackName', "sg-public"]]
      GroupDescription: "Pub facing security group"
      VpcId: !Ref Vpc
      Tags:
        -
          Key: "Name"
          Value: !Join [_, [!Ref 'AWS::StackName', "sg-public"]]
        -
          Key: "Ownwer"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 24.80.142.118/32

  Pinky:
    Type: 'AWS::EC2::Instance'
    DependsOn: IGAttachment
    Properties:
      #       ImageId: ami-215dbe59 - wrong instance type
      ImageId: ami-275dbe5f
      KeyName: !Ref EC2Keypair
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: 0
          Description: "One bad-ass network interface"
          SubnetId: !Ref SubnetPub1
          GroupSet:
            - Ref: SecurityGroupPub
      #       SecurityGroupIds:
      #       SecurityGroups:
      Tags:
        -
          Key: "Name"
          Value: !Join [_, [!Ref 'AWS::StackName', "test-ec2"]]
        -
          Key: "Ownwer"
          Value: "Stephen"
        -
          Key: "Client"
          Value: "DevOps Pro training"

Outputs:
  VPCId:
    Value: !Ref Vpc
  BucketName:
    Value: !Ref S3Bucket
